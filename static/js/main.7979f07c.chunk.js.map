{"version":3,"sources":["components/Header/Header.jsx","components/Node/Node.jsx","components/Animator.js","algorithms/Pathfinder.js","algorithms/Dijkstra.js","algorithms/BFS.js","algorithms/DFS.js","algorithms/BellmanFord.js","mazes/mazes.js","components/Grid.js","components/Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","disabled","this","props","visualized","NavDropdown","title","Item","onClick","changeAlgo","Button","changeWeights","visualize","clearBoard","generateMaze","Component","Node","col","row","onMouseDown","isEnd","isStart","isVisited","isWall","onMouseEnter","onMouseUp","weight","nodeType","node","Animator","visitedSpeed","shortestSpeed","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","document","getElementById","Pathfinder","grid","neighbors","push","filter","neighbor","startNode","endNode","shortestPath","currentNode","unshift","previous","nodes","j","Dijkstra","distance","unvisited","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","getUnvisitedNeighbors","newDistance","unvisitedNodes","sort","nodeA","nodeB","weighted","text","BFS","isVisted","DFS","pop","BellmanFord","includes","recursiveDivision","addInnerWalls","h","minX","maxX","minY","maxY","y","Math","floor","randomNumber","hole","hole2","toggleWall","addHWall","x","addVWall","width","height","addOuterWalls","min","max","random","Grid","start","end","initializeGrid","newRow","initializeNode","DEFAULT_START","DEFAULT_END","Visualizer","state","algo","algoText","speed","mouseIsPressed","animator","movingStart","movingEnd","bind","speedChange","algoChange","newWeights","setState","toggleStart","toggleEnd","newAlgo","newAlgoText","newGrid","unvisitNodes","keepWalls","updateSpeed","traverser","traverse","getShortestPath","animate","buttonLockTime","removeWalls","type","decider","randomWalls","changeSpeed","map","rowIndex","key","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7979f07c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport \"./Header.css\";\n\n/*\nControls menu for the pathfinding visualizer app.\n*/\nexport default class Header extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\".\">Pathfinding Algorithm Visualizer</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\" disabled={this.props.visualized}>\n              <NavDropdown\n                title=\"Algorithms\"\n                id=\"basic-nav-dropdown\"\n                className=\"my-dropdown\"\n              >\n                <NavDropdown.Item\n                  href=\"#\"\n                  className=\"my-dropdown-item\"\n                  onClick={() => this.props.changeAlgo(\"Dijkstra\")}\n                >\n                  Djikstra's\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  href=\"#\"\n                  className=\"my-dropdown-item\"\n                  onClick={() => this.props.changeAlgo(\"Bellman-Ford\")}\n                >\n                  Bellman-Ford\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  href=\"#\"\n                  className=\"my-dropdown-item\"\n                  onClick={() => this.props.changeAlgo(\"BFS\")}\n                >\n                  BFS\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  href=\"#\"\n                  className=\"my-dropdown-item\"\n                  onClick={() => this.props.changeAlgo(\"DFS\")}\n                >\n                  DFS\n                </NavDropdown.Item>\n              </NavDropdown>\n              <Button\n                className=\"non-visualize-button\"\n                onClick={this.props.changeWeights}\n                disabled={this.props.visualized}\n              >\n                New Weights\n              </Button>\n              <Button\n                className=\"visualize-it-button\"\n                onClick={this.props.visualize}\n                disabled={this.props.visualized}\n              >\n                Visualize It!\n              </Button>\n              <Button\n                className=\"non-visualize-button\"\n                onClick={this.props.clearBoard}\n                disabled={this.props.visualized}\n              >\n                Clear Board\n              </Button>\n              <NavDropdown\n                title=\"Maze Algorithms\"\n                id=\"basic-nav-dropdown\"\n                className=\"my-dropdown\"\n              >\n                <NavDropdown.Item\n                  href=\"#\"\n                  className=\"my-dropdown-item\"\n                  onClick={() => {\n                    this.props.generateMaze(\"Random\");\n                  }}\n                >\n                  Random Walls\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  href=\"#\"\n                  className=\"my-dropdown-item\"\n                  onClick={() => {\n                    this.props.generateMaze(\"RecursiveDivision\");\n                  }}\n                >\n                  Recursive Division\n                </NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\n/*\nReact compoenent used to represent the Nodes in the generated page.\n*/\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      row,\n      isEnd,\n      isStart,\n      isVisited,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      weight\n    } = this.props;\n    return (\n      <div className=\"node-box\">\n        <div\n          id={`node-${row}-${col}`}\n          className={`node ${nodeType(this.props)}`}\n          onMouseDown={() => onMouseDown(row, col)}\n          onMouseEnter={() => onMouseEnter(row, col)}\n          onMouseUp={() => onMouseUp()}\n        >\n          <p>{weight}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst nodeType = node => {\n  const type = node.isEnd\n    ? \"node-end\"\n    : node.isStart\n    ? \"node-start\"\n    : node.isWall\n    ? \"node-wall\"\n    : \" \";\n  return type;\n};\n","export default class Animator {\n  constructor() {\n    this.visitedSpeed = 10;\n    this.shortestSpeed = 50;\n  }\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, this.visitedSpeed * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, this.shortestSpeed * i);\n    }\n  }\n\n  updateSpeed(visitedSpeed, shortestSpeed) {\n    this.visitedSpeed = visitedSpeed;\n    this.shortestSpeed = shortestSpeed;\n  }\n}\n","/* Default class for other pathfinding algorithms to inherit from.*/\nexport default class Pathfinder {\n  getUnvisitedNeighbors(node, grid) {\n    /* Get the unvisited neighbors of\n    node which are not walls.*/\n    let neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    neighbors = neighbors.filter(neighbor => !neighbor.isVisited);\n    return neighbors.filter(neighbor => !neighbor.isWall);\n  }\n\n  getShortestPath(startNode, endNode) {\n    /* Backtrack from the endNode to the\n      startNode to get the shortest path */\n    const shortestPath = [];\n    let currentNode = endNode;\n    while (currentNode !== null && currentNode !== startNode) {\n      shortestPath.unshift(currentNode);\n      currentNode = currentNode.previous;\n    }\n    shortestPath.unshift(startNode);\n    return shortestPath;\n  }\n\n  getAllNodes(grid) {\n    const nodes = [];\n    for (let i = 0; i < 19; i++) {\n      for (let j = 0; j < 49; j++) {\n        if (grid[i][j].isVisited || grid[i][j].isWall) continue;\n        nodes.push(grid[i][j]);\n      }\n    }\n    return nodes;\n  }\n}\n","/*\nImplementation of Dijkstra's algorithm in JavaScript.\n*/\nimport Pathfinder from \"./Pathfinder\";\n\nexport default class Dijkstra extends Pathfinder {\n  static weighted = true;\n  static text = `Dijkstra's shortest path algorithm works on weighted graphs and\nguarantees the shortest path. This algorithm works similarly to breadth-first\nsearch in that it begins at the start node and then works it's way outward in\nall directions. As it works outwards it checks the edges (u,v,w) to see if\nu.distance + w is less than v.distance. If so it updates v.distance to hold\nu.distance + w. It continues this process until no more nodes can be visited,\nor until the destination node is found.`;\n\n  traverse(grid, startNode, endNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    startNode.weight = 0;\n    const unvisited = this.getAllNodes(grid);\n\n    while (unvisited.length !== 0) {\n      this.sortNodesByDistance(unvisited);\n      const closestNode = unvisited.shift();\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should therefore stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === endNode) return visitedNodesInOrder;\n      let neighbors = this.getUnvisitedNeighbors(closestNode, grid);\n      for (const neighbor of neighbors) {\n        let newDistance = closestNode.distance + neighbor.weight;\n        if (newDistance < neighbor.distance) {\n          neighbor.distance = newDistance;\n          neighbor.previous = closestNode;\n        }\n      }\n    }\n  }\n\n  sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n}\n","import Pathfinder from \"./Pathfinder\";\n/* Class for Breadth-first-search */\nexport default class BFS extends Pathfinder {\n  static weighted = false;\n  static text = `Breadth-first search works on unweighted graphs and\n  guarantees the shortest path. This algorithm works by beginning at the\n  starting node and visiting each of its neighbors. It then moves to\n  each neighbor and visits any of its unvisited neighbors. It repeats this\n  process spreading out across the graph until all nodes that can be visited\n  have been, or until we reach the destination node.`;\n\n  traverse(grid, startNode, endNode) {\n    const unvisited = [];\n    const visitedNodesInOrder = [];\n    startNode.isVisted = true;\n    startNode.previous = null;\n    unvisited.push(startNode);\n    visitedNodesInOrder.push(startNode);\n    while (unvisited.length !== 0) {\n      let currentNode = unvisited.shift();\n      if (currentNode === endNode) {\n        return visitedNodesInOrder;\n      }\n      let neighbors = this.getUnvisitedNeighbors(currentNode, grid);\n      for (const neighbor of neighbors) {\n        neighbor.isVisited = true;\n        neighbor.previous = currentNode;\n        unvisited.push(neighbor);\n        visitedNodesInOrder.push(neighbor);\n      }\n    }\n    return visitedNodesInOrder;\n  }\n}\n","import Pathfinder from \"./Pathfinder\";\nexport default class DFS extends Pathfinder {\n  static weighted = false;\n  static text = `Depth-first search works on unweighted graphs and does not\n  guarantee the shortest path. This algorithm visits one node at a time,\n  moving along the graph edges until it comes to a node with no unvisited\n  neighbors. It then backtracks to a node which has unvisited neighbors and\n  moves forward down that path. It repeats this until all nodes that can\n  be visited have been, or until it reaches the destination node.`;\n  traverse(grid, startNode, endNode) {\n    const unvisited = [];\n    const visitedNodesInOrder = [];\n    startNode.isVisted = true;\n    startNode.previous = null;\n    unvisited.push(startNode);\n    visitedNodesInOrder.push(startNode);\n    while (unvisited.length !== 0) {\n      let currentNode = unvisited.pop();\n      if (currentNode === endNode) {\n        return visitedNodesInOrder;\n      }\n      visitedNodesInOrder.push(currentNode);\n      let neighbors = this.getUnvisitedNeighbors(currentNode, grid);\n      for (const neighbor of neighbors) {\n        neighbor.isVisited = true;\n        neighbor.previous = currentNode;\n        unvisited.push(neighbor);\n      }\n    }\n    return visitedNodesInOrder;\n  }\n}\n","import Pathfinder from \"./Pathfinder\";\n\nexport default class BellmanFord extends Pathfinder {\n  static weighted = true;\n  static text = `Bellman-Ford's works on weighted graphs and guarantees\n  the shortest path. This algorithm works by iterating |V| - 1 times over\n  all edges in the graph. For each edge (u,v,w) it \"relaxes\" the edge\n  by checking to see if u.distance + w is less than v.distance.\n  If so, then v.distance is updated to hold u.distance + w.\n  For this visualization I consider a node visited the first time\n  one of its edges is relaxed.`;\n  traverse(grid, startNode, endNode) {\n    const visitedNodesInOrder = [];\n    const nodes = this.getAllNodes(grid);\n    startNode.previous = null;\n    startNode.distance = 0;\n    visitedNodesInOrder.push(startNode);\n    for (let i = 0; i < nodes.length - 1; i++) {\n      for (const node of nodes) {\n        const neighbors = this.getUnvisitedNeighbors(node, grid);\n        for (const neighbor of neighbors) {\n          let newDistance = node.distance + neighbor.weight;\n          if (newDistance < neighbor.distance) {\n            neighbor.distance = newDistance;\n            neighbor.previous = node;\n            if (!visitedNodesInOrder.includes(neighbor))\n              visitedNodesInOrder.push(neighbor);\n          }\n        }\n      }\n    }\n    return visitedNodesInOrder;\n  }\n}\n","/* Generates a maze of random walls. */\nexport function randomWalls(grid) {\n  for (let row = 0; row < 19; row++) {\n    for (let col = 0; col < 49; col++) {\n      let decider = Math.random();\n      if (decider <= 0.1 || decider >= 0.9) grid.toggleWall(row, col);\n    }\n  }\n}\n\n/* The below methods are used to generate a maze with\nthe recursive dvision method.*/\nexport function recursiveDivision(grid) {\n  addInnerWalls(grid, true, 1, 47, 1, 17);\n  addOuterWalls(grid, 49, 19);\n}\n\nfunction addOuterWalls(grid, width, height) {\n  for (var i = 0; i < height; i++) {\n    if (i === 0 || i === height - 1) {\n      for (var j = 0; j < width; j++) {\n        if (!grid.grid[i][j].isWall) grid.toggleWall(i, j);\n      }\n    } else {\n      if (!grid.grid[i][0].isWall) grid.toggleWall(i, 0);\n      if (!grid.grid[i][width - 1].isWall) grid.toggleWall(i, width - 1);\n    }\n  }\n}\n\nfunction addInnerWalls(grid, h, minX, maxX, minY, maxY) {\n  if (h) {\n    if (maxX - minX < 2) {\n      return;\n    }\n\n    var y = Math.floor(randomNumber(minY, maxY) / 2) * 2;\n    addHWall(grid, minX, maxX, y);\n\n    addInnerWalls(grid, !h, minX, maxX, minY, y - 1);\n    addInnerWalls(grid, !h, minX, maxX, y + 1, maxY);\n  } else {\n    if (maxY - minY < 2) {\n      return;\n    }\n\n    var x = Math.floor(randomNumber(minX, maxX) / 2) * 2;\n    addVWall(grid, minY, maxY, x);\n\n    addInnerWalls(grid, !h, minX, x - 1, minY, maxY);\n    addInnerWalls(grid, !h, x + 1, maxX, minY, maxY);\n  }\n}\n\nfunction addHWall(grid, minX, maxX, y) {\n  var hole = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\n  var hole2 = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\n  for (var i = minX; i <= maxX; i++) {\n    if (i === hole || i === hole2) continue;\n    grid.toggleWall(y, i);\n  }\n}\n\nfunction addVWall(grid, minY, maxY, x) {\n  var hole = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\n  var hole2 = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\n  for (var i = minY; i <= maxY; i++) {\n    if (i === hole || i === hole2) continue;\n    grid.toggleWall(i, x);\n  }\n}\n\nfunction randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","/*\nGrid class for storing the graph and the nodes therein.\n*/\nexport default class Grid {\n  constructor(weighted, start, end) {\n    this.grid = this.initializeGrid(weighted, start, end);\n  }\n\n  initializeNode(row, col, weighted, start, end) {\n    let weight = \"0\";\n    if (weighted) {\n      weight = Math.floor(Math.random() * 5) + 1;\n    }\n    return {\n      col,\n      row,\n      isEnd: row === end[0] && col === end[1],\n      isStart: row === start[0] && col === start[1],\n      isVisited: false,\n      isWall: false,\n      distance: Infinity,\n      previous: null,\n      weight: weight\n    };\n  }\n\n  initializeGrid(weighted, start, end) {\n    const grid = [];\n    for (let row = 0; row < 19; row++) {\n      const newRow = [];\n      for (let col = 0; col < 49; col++) {\n        newRow.push(this.initializeNode(row, col, weighted, start, end));\n      }\n      grid.push(newRow);\n    }\n    return grid;\n  }\n\n  toggleStart(row, col) {\n    this.grid[row][col].isStart = !this.grid[row][col].isStart;\n  }\n  toggleEnd(row, col) {\n    this.grid[row][col].isEnd = !this.grid[row][col].isEnd;\n  }\n  toggleWall(row, col) {\n    this.grid[row][col].isWall = !this.grid[row][col].isWall;\n  }\n}\n","import React, { Component } from \"react\";\nimport Header from \"./Header/Header\";\nimport Node from \"./Node/Node\";\nimport Animator from \"./Animator\";\nimport Dijkstra from \"../algorithms/Dijkstra\";\nimport BFS from \"../algorithms/BFS\";\nimport DFS from \"../algorithms/DFS\";\nimport BellmanFord from \"../algorithms/BellmanFord\";\nimport { randomWalls, recursiveDivision } from \"../mazes/mazes\";\nimport Grid from \"./Grid\";\nimport \"./Visualizer.css\";\n\nconst DEFAULT_START = [9, 9];\nconst DEFAULT_END = [9, 39];\n/*\nVisualizer component which controls much of the functionality of the app.\n*/\nexport default class Visualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      algo: Dijkstra,\n      algoText: \"Dijkstra's\",\n      speed: \"fast\",\n      grid: new Grid(Dijkstra.weighted, DEFAULT_START, DEFAULT_END),\n      mouseIsPressed: false,\n      animator: new Animator(),\n      visualized: false,\n      start: DEFAULT_START,\n      end: DEFAULT_END,\n      movingStart: false,\n      movingEnd: false\n    };\n\n    this.visualize = this.visualize.bind(this);\n    this.speedChange = this.speedChange.bind(this);\n    this.algoChange = this.algoChange.bind(this);\n    this.clearBoard = this.clearBoard.bind(this);\n    this.newWeights = this.newWeights.bind(this);\n    this.generateMaze = this.generateMaze.bind(this);\n  }\n\n  /* The handleMouseXxxx functions handle the\n  modifying of nodes to become walls.*/\n  handleMouseDown(row, col) {\n    const { grid, start, end, visualized } = this.state;\n    if (visualized) return;\n    if (row === start[0] && col === start[1]) {\n      this.setState({ movingStart: true });\n    } else if (row === end[0] && col === end[1]) {\n      this.setState({ movingEnd: true });\n    } else {\n      grid.toggleWall(row, col);\n    }\n    this.setState({ grid: grid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    const {\n      grid,\n      start,\n      end,\n      mouseIsPressed,\n      movingStart,\n      movingEnd,\n      visualized\n    } = this.state;\n    if (!mouseIsPressed || visualized) return;\n    if (movingStart) {\n      grid.toggleStart(row, col);\n      grid.toggleStart(start[0], start[1]);\n      this.setState({\n        start: [row, col],\n        movingStart: true\n      });\n    } else if (movingEnd) {\n      grid.toggleEnd(row, col);\n      grid.toggleEnd(end[0], end[1]);\n      this.setState({ end: [row, col], movingEnd: true });\n    } else {\n      grid.toggleWall(row, col);\n    }\n    this.setState({\n      grid: grid\n    });\n  }\n\n  handleMouseUp() {\n    const { visualized } = this.state;\n    if (visualized) return;\n    this.setState({\n      mouseIsPressed: false,\n      movingStart: false,\n      movingEnd: false\n    });\n  }\n\n  /* Handles the selection of algorithms.*/\n  algoChange(text) {\n    const { grid, start, end, visualized } = this.state;\n    if (visualized) return;\n    let newAlgo = null;\n    let newAlgoText = null;\n    let newGrid = null;\n\n    this.unvisitNodes(false, start, end);\n    switch (text) {\n      case \"Dijkstra\":\n        newAlgo = Dijkstra;\n        newAlgoText = \"Dijkstra's\";\n        newGrid = new Grid(Dijkstra.weighted, start, end);\n        break;\n      case \"BFS\":\n        newAlgo = BFS;\n        newAlgoText = \"Breadth-First Search\";\n        newGrid = new Grid(BFS.weighted, start, end);\n        break;\n      case \"DFS\":\n        newAlgo = DFS;\n        newAlgoText = \"Depth-First Search\";\n        newGrid = new Grid(DFS.weighted, start, end);\n        break;\n      case \"Bellman-Ford\":\n        newAlgo = BellmanFord;\n        newAlgoText = \"Bellman-Ford\";\n        newGrid = new Grid(BellmanFord.weighted, start, end);\n        break;\n      default:\n        return;\n    }\n    newGrid = this.keepWalls(grid, newGrid);\n    this.setState({ algo: newAlgo, algoText: newAlgoText, grid: newGrid });\n  }\n\n  /* Handles the speed selection updating.\n  This feature is currently not implemented.*/\n  speedChange(text) {\n    let { visitedSpeed, shortestSpeed } = [0, 0];\n    switch (text) {\n      case \"slow\":\n        visitedSpeed = 100;\n        shortestSpeed = 500;\n        break;\n      case \"average\":\n        visitedSpeed = 50;\n        shortestSpeed = 250;\n        break;\n      case \"fast\":\n        visitedSpeed = 10;\n        shortestSpeed = 50;\n        break;\n      default:\n        return;\n    }\n    this.state.animator.updateSpeed(visitedSpeed, shortestSpeed);\n  }\n\n  /* Runs the process of visualizing the algorithm.*/\n  visualize() {\n    const { grid, algo, visualized, start, end, animator } = this.state;\n    if (visualized) return;\n    this.unvisitNodes(false, start, end);\n    this.setState({ visualized: true });\n    const traverser = new algo();\n    const startNode = grid.grid[start[0]][start[1]];\n    const endNode = grid.grid[end[0]][end[1]];\n    let visitedNodesInOrder = traverser.traverse(grid.grid, startNode, endNode);\n    let shortestPath = traverser.getShortestPath(startNode, endNode);\n    animator.animate(visitedNodesInOrder, shortestPath);\n    let buttonLockTime = Math.max(\n      (visitedNodesInOrder.length + shortestPath.length) * 12.5,\n      5000\n    );\n    setTimeout(() => this.setState({ visualized: false }), buttonLockTime);\n  }\n\n  unvisitNodes(removeWalls, start, end) {\n    const { grid } = this.state;\n    for (let row = 0; row < 19; row++) {\n      for (let col = 0; col < 49; col++) {\n        let node = grid.grid[row][col];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node \";\n        node.isVisited = false;\n        node.previous = null;\n        node.distance = Infinity;\n        if (removeWalls) {\n          node.isWall = false;\n        } else if (node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }\n        if (row === start[0] && col === start[1]) {\n          document.getElementById(`node-${start[0]}-${start[1]}`).className =\n            \"node node-start\";\n          node.isStart = true;\n        }\n        if (row === end[0] && col === end[1]) {\n          document.getElementById(`node-${end[0]}-${end[1]}`).className =\n            \"node node-end\";\n          node.isEnd = true;\n        }\n      }\n    }\n    this.setState({ grid: grid, visualized: false });\n  }\n\n  /* Resets the nodes back to default state if removeWalls === true.\n  If removeWalls === false, then walls are kept in place.*/\n  clearBoard() {\n    const { visualized } = this.state;\n    if (visualized) return;\n    this.unvisitNodes(true, DEFAULT_START, DEFAULT_END);\n    this.setState({ start: DEFAULT_START, end: DEFAULT_END });\n  }\n\n  /* Creates a new Grid object with new weights.*/\n  newWeights() {\n    const { grid, algo, start, end, visualized } = this.state;\n    if (visualized) return;\n    this.unvisitNodes(false, start, end);\n    const newGrid = new Grid(algo.weighted, start, end);\n    for (let row = 0; row < 19; row++) {\n      for (let col = 0; col < 49; col++) {\n        if (grid.grid[row][col].isWall) {\n          newGrid.grid[row][col].isWall = true;\n        }\n      }\n    }\n    this.setState({ grid: newGrid });\n  }\n\n  /* Function to transfer wall locations from\n the previous grid to a new grid.*/\n  keepWalls(grid, newGrid) {\n    for (let row = 0; row < 19; row++) {\n      for (let col = 0; col < 49; col++) {\n        if (grid.grid[row][col].isWall) {\n          newGrid.grid[row][col].isWall = true;\n        }\n      }\n    }\n    return newGrid;\n  }\n\n  generateMaze(type) {\n    const { grid, start, end } = this.state;\n    this.unvisitNodes(true, start, end);\n    switch (type) {\n      case \"Random\":\n        randomWalls(grid);\n        break;\n      case \"RecursiveDivision\":\n        recursiveDivision(grid);\n        break;\n      default:\n        return;\n    }\n    this.setState({ grid: grid });\n    /*\n    For some reason the following line is needed to\n    actually render things correctly if you try and\n    generate two mazes without doing some other action.\n    */\n    this.unvisitNodes(false, start, end);\n  }\n\n  render() {\n    const { grid, mouseIsPressed, visualized, algo } = this.state;\n    return (\n      <div>\n        <Header\n          visualize={this.visualize}\n          changeAlgo={this.algoChange}\n          changeSpeed={this.speedChange}\n          clearBoard={this.clearBoard}\n          changeWeights={this.newWeights}\n          visualized={visualized}\n          generateMaze={this.generateMaze}\n        ></Header>\n\n        <h3>The current algorithm is {this.state.algoText}.</h3>\n        <div className=\"information\">{algo.text}</div>\n        <div className=\"board\">\n          {grid.grid.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, nodeIndex) => {\n                  const { row, col, isEnd, isStart, isWall, weight } = node;\n                  return (\n                    <Node\n                      key={nodeIndex}\n                      col={col}\n                      row={row}\n                      isEnd={isEnd}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      weight={weight}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Visualizer from \"./components/Visualizer\";\nfunction App() {\n  return (\n    <div>\n      <div className=\"App\">\n        <Visualizer></Visualizer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}