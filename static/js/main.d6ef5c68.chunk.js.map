{"version":3,"sources":["components/Header/Header.jsx","components/Node/Node.jsx","components/Animator.js","algorithms/Pathfinder.js","algorithms/Dijkstra.js","algorithms/BFS.js","algorithms/DFS.js","components/Grid.js","components/Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","disable","this","props","visualized","NavDropdown","title","Item","onClick","changeAlgo","Button","clearBoard","disabled","changeWeights","visualize","Component","Node","col","row","onMouseDown","isEnd","isStart","isVisited","isWall","onMouseEnter","onMouseUp","weight","nodeType","node","Animator","visitedSpeed","shortestSpeed","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","document","getElementById","Pathfinder","grid","neighbors","push","filter","neighbor","startNode","endNode","shortestPath","currentNode","unshift","previous","nodes","j","Dijkstra","distance","unvisited","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","getUnvisitedNeighbors","newDistance","unvisitedNodes","sort","nodeA","nodeB","weighted","BFS","isVisted","DFS","pop","Grid","start","end","initializeGrid","Math","floor","random","newRow","initializeNode","DEFAULT_START","DEFAULT_END","Visualizer","state","algo","algoText","speed","mouseIsPressed","animator","movingStart","movingEnd","bind","speedChange","algoChange","newWeights","prevStart","setState","toggleWall","toggleStart","toggleEnd","text","newAlgo","newAlgoText","newGrid","unvisitNodes","keepWalls","updateSpeed","traverser","traverse","getShortestPath","animate","buttonLockTime","max","removeWalls","changeSpeed","map","rowIndex","key","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d6ef5c68.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport \"./Header.css\";\n\n/*\nControls menu for the pathfinding visualizer app.\n*/\nexport default class Header extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\".\">Pathfinding Algorithm Visualizer</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\" disable={this.props.visualized}>\n              <NavDropdown\n                title=\"Algorithms\"\n                id=\"basic-nav-dropdown\"\n                className=\"my-dropdown\"\n              >\n                <NavDropdown.Item\n                  href=\"#\"\n                  className=\"my-dropdown-item\"\n                  onClick={() => this.props.changeAlgo(\"Dijkstra\")}\n                >\n                  Djikstra's\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  href=\"#\"\n                  className=\"my-dropdown-item\"\n                  onClick={() => this.props.changeAlgo(\"BFS\")}\n                >\n                  BFS\n                </NavDropdown.Item>\n                <NavDropdown.Item\n                  href=\"#\"\n                  className=\"my-dropdown-item\"\n                  onClick={() => this.props.changeAlgo(\"DFS\")}\n                >\n                  DFS\n                </NavDropdown.Item>\n              </NavDropdown>\n              <Button\n                className=\"non-visualize-button\"\n                onClick={this.props.clearBoard}\n                disabled={this.props.visualized}\n              >\n                Clear Board\n              </Button>\n              <Button\n                className=\"non-visualize-button\"\n                onClick={this.props.changeWeights}\n                disabled={this.props.visualized}\n              >\n                New Weights\n              </Button>\n              <Button\n                className=\"visualize-it-button\"\n                onClick={this.props.visualize}\n                disabled={this.props.visualized}\n              >\n                Visualize It!\n              </Button>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\n/*\nReact compoenent used to represent the Nodes in the generated page.\n*/\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      row,\n      isEnd,\n      isStart,\n      isVisited,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      weight\n    } = this.props;\n    return (\n      <div className=\"node-box\">\n        <div\n          id={`node-${row}-${col}`}\n          className={`node ${nodeType(this.props)}`}\n          onMouseDown={() => onMouseDown(row, col)}\n          onMouseEnter={() => onMouseEnter(row, col)}\n          onMouseUp={() => onMouseUp()}\n        >\n          <p>{weight}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst nodeType = node => {\n  const type = node.isEnd\n    ? \"node-end\"\n    : node.isStart\n    ? \"node-start\"\n    : node.isWall\n    ? \"node-wall\"\n    : \" \";\n  return type;\n};\n","export default class Animator {\n  constructor() {\n    this.visitedSpeed = 10;\n    this.shortestSpeed = 50;\n  }\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, this.visitedSpeed * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, this.shortestSpeed * i);\n    }\n  }\n\n  updateSpeed(visitedSpeed, shortestSpeed) {\n    this.visitedSpeed = visitedSpeed;\n    this.shortestSpeed = shortestSpeed;\n  }\n}\n","/* Default class for other pathfinding algorithms to inherit from.*/\nexport default class Pathfinder {\n  getUnvisitedNeighbors(node, grid) {\n    /* Get the unvisited neighbors of\n    node which are not walls.*/\n    let neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    neighbors = neighbors.filter(neighbor => !neighbor.isVisited);\n    return neighbors.filter(neighbor => !neighbor.isWall);\n  }\n\n  getShortestPath(startNode, endNode) {\n    /* Backtrack from the endNode to the\n      startNode to get the shortest path */\n    const shortestPath = [];\n    let currentNode = endNode;\n    while (currentNode !== null && currentNode !== startNode) {\n      shortestPath.unshift(currentNode);\n      currentNode = currentNode.previous;\n    }\n    shortestPath.unshift(startNode);\n    return shortestPath;\n  }\n  getAllNodes(grid) {\n    const nodes = [];\n    for (let i = 0; i < 20; i++) {\n      for (let j = 0; j < 50; j++) {\n        if (grid[i][j].isVisited || grid[i][j].isWall) continue;\n        nodes.push(grid[i][j]);\n      }\n    }\n    return nodes;\n  }\n}\n","/*\nImplementation of Dijkstra's algorithm in JavaScript.\n*/\nimport Pathfinder from \"./Pathfinder\";\n\nexport default class Dijkstra extends Pathfinder {\n  static weighted = true;\n\n  traverse(grid, startNode, endNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    startNode.weight = 0;\n    const unvisited = this.getAllNodes(grid);\n\n    while (unvisited.length !== 0) {\n      this.sortNodesByDistance(unvisited);\n      const closestNode = unvisited.shift();\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should therefore stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === endNode) return visitedNodesInOrder;\n      let neighbors = this.getUnvisitedNeighbors(closestNode, grid);\n      for (const neighbor of neighbors) {\n        let newDistance = closestNode.distance + neighbor.weight;\n        if (newDistance < neighbor.distance) {\n          neighbor.distance = newDistance;\n          neighbor.previous = closestNode;\n        }\n      }\n    }\n  }\n\n  sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n}\n","import Pathfinder from \"./Pathfinder\";\n/* Class for Breadth-first-search */\nexport default class BFS extends Pathfinder {\n  static weighted = false;\n\n  traverse(grid, startNode, endNode) {\n    const unvisited = [];\n    const visitedNodesInOrder = [];\n    startNode.isVisted = true;\n    startNode.previous = null;\n    unvisited.push(startNode);\n    visitedNodesInOrder.push(startNode);\n    while (unvisited.length !== 0) {\n      let currentNode = unvisited.shift();\n      if (currentNode === endNode) {\n        return visitedNodesInOrder;\n      }\n      let neighbors = this.getUnvisitedNeighbors(currentNode, grid);\n      for (const neighbor of neighbors) {\n        neighbor.isVisited = true;\n        neighbor.previous = currentNode;\n        unvisited.push(neighbor);\n        visitedNodesInOrder.push(neighbor);\n      }\n    }\n    return visitedNodesInOrder;\n  }\n}\n","import Pathfinder from \"./Pathfinder\";\nexport default class DFS extends Pathfinder {\n  static weighted = false;\n\n  traverse(grid, startNode, endNode) {\n    const unvisited = [];\n    const visitedNodesInOrder = [];\n    startNode.isVisted = true;\n    startNode.previous = null;\n    unvisited.push(startNode);\n    visitedNodesInOrder.push(startNode);\n    while (unvisited.length !== 0) {\n      let currentNode = unvisited.pop();\n      if (currentNode === endNode) {\n        return visitedNodesInOrder;\n      }\n      visitedNodesInOrder.push(currentNode);\n      let neighbors = this.getUnvisitedNeighbors(currentNode, grid);\n      for (const neighbor of neighbors) {\n        neighbor.isVisited = true;\n        neighbor.previous = currentNode;\n        unvisited.push(neighbor);\n      }\n    }\n    return visitedNodesInOrder;\n  }\n}\n","/*\nGrid class for storing the graph and the nodes therein.\n*/\nexport default class Grid {\n  constructor(weighted, start, end) {\n    this.grid = this.initializeGrid(weighted, start, end);\n  }\n\n  initializeNode(row, col, weighted, start, end) {\n    let weight = \"0\";\n    if (weighted) {\n      weight = Math.floor(Math.random() * 5) + 1;\n    }\n    return {\n      col,\n      row,\n      isEnd: row === end[0] && col === end[1],\n      isStart: row === start[0] && col === start[1],\n      isVisited: false,\n      isWall: false,\n      distance: Infinity,\n      previous: null,\n      weight: weight\n    };\n  }\n\n  initializeGrid(weighted, start, end) {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const newRow = [];\n      for (let col = 0; col < 50; col++) {\n        newRow.push(this.initializeNode(row, col, weighted, start, end));\n      }\n      grid.push(newRow);\n    }\n    return grid;\n  }\n\n  toggleStart(row, col) {\n    this.grid[row][col].isStart = !this.grid[row][col].isStart;\n  }\n  toggleEnd(row, col) {\n    this.grid[row][col].isEnd = !this.grid[row][col].isEnd;\n  }\n  toggleWall(row, col) {\n    this.grid[row][col].isWall = !this.grid[row][col].isWall;\n  }\n}\n","import React, { Component } from \"react\";\nimport Header from \"./Header/Header\";\nimport Node from \"./Node/Node\";\nimport Animator from \"./Animator\";\nimport Dijkstra from \"../algorithms/Dijkstra\";\nimport BFS from \"../algorithms/BFS\";\nimport DFS from \"../algorithms/DFS\";\nimport Grid from \"./Grid\";\nimport \"./Visualizer.css\";\n\nconst DEFAULT_START = [9, 9];\nconst DEFAULT_END = [9, 39];\n/*\nVisualizer component which controls much of the functionality of the app.\n*/\nexport default class Visualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      algo: Dijkstra,\n      algoText: \"Dijkstra's\",\n      speed: \"fast\",\n      grid: new Grid(Dijkstra.weighted, DEFAULT_START, DEFAULT_END),\n      mouseIsPressed: false,\n      animator: new Animator(),\n      visualized: false,\n      start: DEFAULT_START,\n      end: DEFAULT_END,\n      movingStart: false,\n      movingEnd: false\n    };\n\n    this.visualize = this.visualize.bind(this);\n    this.speedChange = this.speedChange.bind(this);\n    this.algoChange = this.algoChange.bind(this);\n    this.clearBoard = this.clearBoard.bind(this);\n    this.newWeights = this.newWeights.bind(this);\n  }\n\n  /* The handleMouseXxxx functions handle the\n  modifying of nodes to become walls.*/\n  handleMouseDown(row, col) {\n    const { grid, start, prevStart, end, movingStart, visualized } = this.state;\n    if (visualized) return;\n    if (row === start[0] && col === start[1]) {\n      this.setState({ movingStart: true });\n    } else if (row === end[0] && col === end[1]) {\n      this.setState({ movingEnd: true });\n    } else {\n      grid.toggleWall(row, col);\n    }\n    this.setState({ grid: grid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    const {\n      grid,\n      start,\n      end,\n      mouseIsPressed,\n      movingStart,\n      movingEnd,\n      prevStart,\n      visualized\n    } = this.state;\n    if (!mouseIsPressed || visualized) return;\n    if (movingStart) {\n      grid.toggleStart(row, col);\n      grid.toggleStart(start[0], start[1]);\n      this.setState({\n        start: [row, col],\n        movingStart: true\n      });\n    } else if (movingEnd) {\n      grid.toggleEnd(row, col);\n      grid.toggleEnd(end[0], end[1]);\n      this.setState({ end: [row, col], movingEnd: true });\n    } else {\n      grid.toggleWall(row, col);\n    }\n    this.setState({\n      grid: grid\n    });\n  }\n\n  handleMouseUp() {\n    const { visualized } = this.state;\n    if (visualized) return;\n    this.setState({\n      mouseIsPressed: false,\n      movingStart: false,\n      movingEnd: false\n    });\n  }\n\n  /* Handles the selection of algorithms.*/\n  algoChange(text) {\n    const { grid, start, end, visualized } = this.state;\n    if (visualized) return;\n    let newAlgo = null;\n    let newAlgoText = null;\n    let newGrid = null;\n\n    this.unvisitNodes(false, start, end);\n    switch (text) {\n      case \"Dijkstra\":\n        newAlgo = Dijkstra;\n        newAlgoText = \"Dijkstra's\";\n        newGrid = new Grid(Dijkstra.weighted, start, end);\n        break;\n      case \"BFS\":\n        newAlgo = BFS;\n        newAlgoText = \"Breadth-First Search\";\n        newGrid = new Grid(BFS.weighted, start, end);\n        break;\n      case \"DFS\":\n        newAlgo = DFS;\n        newAlgoText = \"Depth-First Search\";\n        newGrid = new Grid(DFS.weighted, start, end);\n        break;\n      default:\n        return;\n    }\n    newGrid = this.keepWalls(grid, newGrid);\n    this.setState({ algo: newAlgo, algoText: newAlgoText, grid: newGrid });\n  }\n\n  /* Handles the speed selection updating.\n  This feature is currently not implemented.*/\n  speedChange(text) {\n    let { visitedSpeed, shortestSpeed } = [0, 0];\n    switch (text) {\n      case \"slow\":\n        visitedSpeed = 100;\n        shortestSpeed = 500;\n        break;\n      case \"average\":\n        visitedSpeed = 50;\n        shortestSpeed = 250;\n        break;\n      case \"fast\":\n        visitedSpeed = 10;\n        shortestSpeed = 50;\n        break;\n      default:\n        return;\n    }\n    this.state.animator.updateSpeed(visitedSpeed, shortestSpeed);\n  }\n\n  /* Runs the process of visualizing the algorithm.*/\n  visualize() {\n    const { grid, algo, visualized, start, end, animator } = this.state;\n    if (visualized) return;\n    this.unvisitNodes(false, start, end);\n    this.setState({ visualized: true });\n    const traverser = new algo();\n    const startNode = grid.grid[start[0]][start[1]];\n    const endNode = grid.grid[end[0]][end[1]];\n    let visitedNodesInOrder = traverser.traverse(grid.grid, startNode, endNode);\n    let shortestPath = traverser.getShortestPath(startNode, endNode);\n    animator.animate(visitedNodesInOrder, shortestPath);\n    let buttonLockTime = Math.max(\n      (visitedNodesInOrder.length + shortestPath.length) * 12.5,\n      10000\n    );\n    setTimeout(() => this.setState({ visualized: false }), buttonLockTime);\n  }\n\n  unvisitNodes(removeWalls, start, end) {\n    const { grid } = this.state;\n    for (let row = 0; row < 20; row++) {\n      for (let col = 0; col < 50; col++) {\n        let node = grid.grid[row][col];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node \";\n        node.isVisited = false;\n        node.previous = null;\n        node.distance = Infinity;\n        if (node.isWall && removeWalls) {\n          node.isWall = false;\n        } else if (node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }\n        if (row === start[0] && col === start[1]) {\n          document.getElementById(`node-${start[0]}-${start[1]}`).className =\n            \"node node-start\";\n          node.isStart = true;\n        }\n        if (row === end[0] && col === end[1]) {\n          document.getElementById(`node-${end[0]}-${end[1]}`).className =\n            \"node node-end\";\n          node.isEnd = true;\n        }\n      }\n    }\n    this.setState({ grid: grid, visualized: false });\n  }\n  /* Resets the nodes back to default state if removeWalls === true.\n  If removeWalls === false, then walls are kept in place.*/\n  clearBoard() {\n    const { visualized } = this.state;\n    if (visualized) return;\n    this.unvisitNodes(true, DEFAULT_START, DEFAULT_END);\n    this.setState({ start: DEFAULT_START, end: DEFAULT_END });\n  }\n\n  /* Creates a new Grid object with new weights.*/\n  newWeights() {\n    const { grid, algo, start, end, visualized } = this.state;\n    if (visualized) return;\n    this.unvisitNodes(false, start, end);\n    const newGrid = new Grid(algo.weighted, start, end);\n    for (let row = 0; row < 20; row++) {\n      for (let col = 0; col < 50; col++) {\n        if (grid.grid[row][col].isWall) {\n          newGrid.grid[row][col].isWall = true;\n        }\n      }\n    }\n    this.setState({ grid: newGrid });\n  }\n\n  /* Function to transfer wall locations from\nthe previous grid to a new grid.*/\n  keepWalls(grid, newGrid) {\n    for (let row = 0; row < 20; row++) {\n      for (let col = 0; col < 50; col++) {\n        if (grid.grid[row][col].isWall) {\n          newGrid.grid[row][col].isWall = true;\n        }\n      }\n    }\n    return newGrid;\n  }\n\n  render() {\n    const { grid, mouseIsPressed, visualized } = this.state;\n    return (\n      <div>\n        <Header\n          visualize={this.visualize}\n          changeAlgo={this.algoChange}\n          changeSpeed={this.speedChange}\n          clearBoard={this.clearBoard}\n          changeWeights={this.newWeights}\n          visualized={visualized}\n        ></Header>\n\n        <h3>The current algorithm is {this.state.algoText}.</h3>\n        <div className=\"board\">\n          {grid.grid.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, nodeIndex) => {\n                  const { row, col, isEnd, isStart, isWall, weight } = node;\n                  return (\n                    <Node\n                      key={nodeIndex}\n                      col={col}\n                      row={row}\n                      isEnd={isEnd}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      weight={weight}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Visualizer from \"./components/Visualizer\";\nfunction App() {\n  return (\n    <div>\n      <div className=\"App\">\n        <Visualizer></Visualizer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}